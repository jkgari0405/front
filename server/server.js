// 復習必要　0814～cというかほぼ初めて　精査するのは

//     origin: [ "http://localhost:5500"],
//   })
// );

const port = 7777; // ポート番号を指定

app.listen(port, () => {
  console.log(`サーバーが http://localhost:${port} で起動中です！`);
});

// ${...} はテンプレートリテラル内で 変数や計算結果を文字列に埋め込む記法 です。
// テンプレートリテラル（Template Literal）とは、文字列の中に変数や式を埋め込める特別な書き方 のことです。

const express = require("express");
// コード上で Express モジュールを読み込むだけで、実際には Express 自体を使う準備をしている状態です。
const cors = require("cors");
// 上記同様
const app = express();

app.use(
  cors({
    origin: ["http://127.0.0.1:5500"],
  })
);

// 1. 関数 (Function)　今回の場合はcors
// 独立して定義された処理のまとまり
// 呼び出すときは 名前だけで呼ぶ
// オブジェクトに属していなくてもよい

// 2. メソッド (Method)
// オブジェクトのプロパティとして持っている関数
// 呼び出すときは オブジェクト名.メソッド名() で呼ぶ
// 「このオブジェクトのために定義された関数」と考えるとわかりやすい

// 3. 今回の例での整理
// app.use(cors(...))
// use は メソッド
// app という Express アプリのオブジェクトに属している

// cors(...) は 関数
// 引数を渡して、ミドルウェア関数を生成している

// リクエスト（request） と レスポンス（response） は、Web サーバーとブラウザ（またはクライアント）間の通信を指します。
// 1. リクエスト（request）
// ブラウザやクライアントがサーバーに送る情報
// 例：
// URL: http://localhost:7777/api/clients
// メソッド: GET / POST
// ヘッダー情報（Content-Typeなど）
// 送信データ（フォームの内容やJSONなど）

// 2. レスポンス（response）
// サーバーがリクエストに応えて返す情報
// 例：
// ステータスコード: 200 OK、404 Not Found
// ヘッダー情報
// 本文（HTML、JSON、文字列など）

// 3. ミドルウェアの役割
// app.use() で設定したミドルウェアは、リクエストがサーバーに届いた時に処理を挟み、必要に応じてレスポンスを加工して返す
// 例：JSON解析、認証チェック、CORS設定、ログ出力など

// 💡 イメージ：
// ブラウザ → [リクエスト] → サーバー（ミドルウェア処理） → [レスポンス] → ブラウザ

app.get("/", (req, res) => {
  res.send("APIサーバーが稼働中です");
});

// / は ルートパス（サーバーのトップページ） を意味します。
// ブラウザでアクセスして「サーバーが動いているか」を確認するためのコード

app.use(express.json());

// express.json() は 「リクエストのボディに含まれる JSON データを自動で解析するミドルウェア」 です。
// 簡潔にまとめるとこうです：
// JavaScript では関数もオブジェクトになれる → プロパティ（関数や値）を持てる
// Express は関数でありつつ、複数の関数プロパティ（json, urlencoded など）を持つ
// この構造は Express 特有ではなく、React、jQuery、Buffer などでも同じパターンがある
// つまり「関数なのにメソッドを持つ」は 言語仕様として普通にできること
// jsonは呼び出せるので「メソッド」と呼べる

// express.jsonについて
// 送信された JSON を JavaScript のオブジェクトに変換
// 変換後は req.body に格納される

// useが何のメソッドがよくわかってないし その中にまたメソッドが入ってる？
app.post("/api/clients", (req, res) => {
  const clientName = req.body.clientName;
  // ややこしく見える。〇〇の〇〇...ならいいか
  console.log("受け取った取引先名:", clientName);
  res.json({ message: "取引先登録が完了しました", clientName });
});

// 「APIだけ」というのは、サーバーがHTMLや画面は返さず、データだけを返す形のことです。
// そして、その場合フロントは別の場所（別サーバーや別フォルダ）で動きます。

// APIだけの構成のイメージ
// bash
// コピーする
// 編集する
// [バックエンドサーバー]
// http://localhost:7777/api/clients  → JSONだけ返す
// 例: { "message": "登録完了", "clientName": "株式会社テスト" }

// [フロントサーバー]
// http://localhost:3000/  → HTML・CSS・JavaScript返す
// 例: ReactやVue、あるいは普通のHTMLファイル
// まずは　データベースとの接続　そのあとには　データベースの更新削除　行の挿入
// 次は JOIN・WHERE・GROUP BY などを使った「必要なデータの抽出」 が自然なステップです。
// CSVやExcelのインポート/エクスポート
// avaScriptをベースにERPや経理業務システムで役立つ機能・習得ポイントを、実務視点で整理します。
// 単なる文法ではなく、**「業務アプリでよく出てくる機能」**に絞ります。

// ① データ処理系（数値・日付・集計）
// ERPや経理ではデータ加工のニーズが高いです。

// 数値計算

// 小数計算の誤差対策（0.1 + 0.2問題 → toFixedやBig.js利用）

// 金額のフォーマット（カンマ区切り 1,234,567）

// 税率計算・端数処理（切り捨て/切り上げ/四捨五入）

// 日付操作

// Date オブジェクトの操作

// dayjs / date-fns での
// フォーマット・日数差計算

// 月末日・月初日の算出（請求処理に必須）

// 集計

// 売上・経費の集計（reduce）

// 月別・部門別などのグルーピング（lodashのgroupBy）

// ② データ可視化
// 数字だけではわかりづらいので、グラフ化できると強いです。

// 売上推移グラフ

// ライブラリ例：Chart.js, Recharts, D3.js

// 部門別円グラフ

// ダッシュボード化

// 一目で KPI（売上・利益・経費率）がわかるUI

// ③ ファイル・データ連携
// 実務ではExcelや外部システムとのやり取りが必須です。

// CSV/Excel入出力

// PapaParse（CSV）

// ExcelJS（Excel）

// PDF生成

// 請求書・納品書・見積書の自動生成（pdf-lib, jspdf）

// API連携

// 会計ソフト（freee, MoneyForward, 弥生）APIとのデータ送受信

// 外部銀行APIや為替APIとの連携

// ④ ユーザー入力とUI改善
// 現場では「入力ミスを防ぐUI」がかなり重宝されます。

// オートコンプリート

// 取引先名や勘定科目の入力支援

// リアルタイム計算

// 数量×単価 = 金額を即時計算

// 日付ピッカー

// カレンダーUIで入力

// バリデーション

// 必須項目チェック

// 桁数・形式チェック（郵便番号、電話番号、メールなど）

// ⑤ 非同期処理と大量データ対応
// ERPではデータ量が多いので、処理の分割や効率化が必要です。

// fetchでの非同期通信

// ローディング表示・処理中の二重送信防止

// ページネーション

// 一覧表示の高速化（1ページ50件など）

// 仮想スクロール

// 大量データをスクロールしながら読み込み

// バッチ処理

// 大量登録や更新を分割して処理

// ⑥ セキュリティ・アクセス制御
// 経理やERPではデータ漏洩防止が最優先です。

// CSRF・XSS対策（入力値エスケープ、HTTPヘッダ設定）

// ログイン必須ページの保護（JWTやセッション）

// ログ記録（誰がいつ何をしたか）

// ⑦ 自動化・効率化の仕組み
// 人の手を減らして正確性を上げる仕組みです。

// 定期処理（スケジュール実行）

// 毎日0時にバックアップ、月末に請求書発行など

// ワークフロー

// 承認フロー（経理部長承認後に仕訳登録）

// 通知機能

// 締め日リマインド、支払期限通知（メール・Slack・LINE通知）

// JavaScriptでもできるけど、Pythonのほうが圧倒的に得意」
// あるいは 「実務レベルだとPythonじゃないと大変」 な処理はいくつかあります。

// ① 大量データの集計・分析
// JavaScriptでも可能ですが、数十万件～数百万件規模になるとPythonのほうが効率的です。

// Pythonはpandasやnumpyを使って、SQLから取ったデータを即座に集計・加工できます。

// python
// コピーする
// 編集する
// import pandas as pd
// df = pd.read_csv("sales.csv")
// monthly = df.groupby("month")["amount"].sum()
// print(monthly)
// 会計・ERPでよくある「月別売上推移」「部門別費用集計」はpandasだと数行で書ける。

// ② 複雑な帳票・レポート自動生成
// JavaScriptでPDFやExcel出力は可能ですが、細かいレイアウト調整や大量帳票生成は負荷が高い。

// Pythonのopenpyxlやxlsxwriterなら数千行のExcelでも高速処理でき、条件付き書式や数式も自在に入れられる。

// 会計システムでの「試算表」「総勘定元帳」などの長大帳票も得意。

// ③ AI・機械学習による予測や分類
// JavaScriptにもTensorFlow.jsがありますが、実務のAIモデルはPython前提で作られることがほとんど。

// 例:

// 売上予測（季節変動を考慮）

// 不正取引検出（異常検知）

// OCRで請求書・領収書の自動読み取り

// ④ データ変換・外部連携の自動化
// 経理やERPでは「外部システムのデータをもらって加工」がよくあります。

// PythonはAPIアクセス・スクレイピング・ファイル変換のライブラリが豊富。

// PDF → CSV変換（tabula-py）

// 画像内文字のOCR（pytesseract）

// 銀行や会計ソフトのAPIから取引データ取得

// ⑤ バッチ処理・スケジュール処理
// Node.jsでもcronは可能ですが、Pythonはデータ処理の速度とライブラリの充実度で有利。

// 例:

// 毎日0時に売上データ集計し、Slackやメール送信

// 月末に請求書PDFを自動作成して送付

// ⑥ 数値計算・統計処理
// 経理やERPでは財務指標計算、在庫回転率、損益分岐点分析などの統計計算をすることがあります。

// Pythonはscipyやstatsmodelsで統計分析が非常に簡単。

// 💡 ざっくり言うと

// JavaScriptが得意 → UI/UX、リアルタイム表示、Web連携、軽い計算

// Pythonが得意 → 大量データ処理、複雑集計、AI・統計、帳票出力、大規模自動化

//app.listen(port); のみでも動く。
//() =>{  } はアロー関数と呼ばれる書き方で、関数を簡潔に書くためのもの。

//Expressの主な役割
// 1 サーバー起動	HTTPリクエストを受けて応答する
// 2 ルーティング	URLごとに処理を振り分ける（例：/clients、/users）
// 3 JSONパース	req.body を自動で読み取ってくれる
// 4 ミドルウェア対応	ログ出力・バリデーション・認証などを途中で挟める
// 5 静的ファイル配信	HTMLや画像なども簡単に配れる
// 6 拡張性	他のライブラリやデータベースとつなぎやすい（MySQL、MongoDB など）

// package.json の役割を説明する
// ① ライブラリの管理	使ってるパッケージを記録する	Express など
// ② スクリプト登録	短いコマンドで実行できるようにする	npm start など
// ③ プロジェクト情報	名前・バージョン・説明などを記録	アプリ名など
// ④ 他の人が再現できる	npm install ですぐ同じ環境にできる	チーム開発に便利

// const express = require("express");
// const app = express();
// const port = 7777;

// app.get("/api/clients", (req, res) => {
//   const clients = [
//     { id: 1, name: "田中" },
//     { id: 2, name: "佐藤" },
//   ];
//   res.json(clients);
// });

// app.listen(port, () => {
//   console.log(`サーバーが http://localhost:${port} で起動中です！`);
// });

// ✅ 解決方法：ルートを追加する
// 以下のように  のルートを Express に追加してください：

// これで  にアクセスすると、JSON データが返ってくるようになります。
